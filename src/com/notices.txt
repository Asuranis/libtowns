http://nick-aschenbach.github.io/blog/2015/02/25/isometric-tile-engine/

http://www.quivira-font.com/index.php UTF-8 FULL font
https://everythingfonts.com/otf-to-ttf

memory fluctuation  --- improved
http://www.dynatrace.com/en/javabook/analyzing-java-memory.html

Shrink and make classes meaning less => harder understand for reverse engeneering
http://proguard.sourceforge.net/

Trick and tips for libgdx
http://www.sadafnoor.com/blog/how-to-create-simple-menu-in-libgdx/

 âˆž = 8734 UTF-8 character                  


NATURE
RIWER  decoration
 
terraformable
PLAINS space for buildings,
FOREST provides LOG
POND provides   FISH
FIELD provides  WHEAT
SWAMP decoration

mountains
QUARRY provides STONE
ORE provides    IRON

BUILDINGS

public building
CASTLE storage for resources
MARKET provides shopping menu  / trade triggers eg. if is more FISH than 30 sell if less than 5 buy

MARKET 
lv_0 = market is in form of planks, stones and coins
lv_1 = allow sells/buy resources for/by coins
lv_2 = can autosell resources from stock  at the end of day if is more than user setted amount 
lv_3 = can autobuy resources to stock  at the end of day if is less than setted amount 
lv_4 = gets own AI and destroy the planet Earth because lv_4 cannot be achieved

                                             1 day = 4 FISH 6 chickens 6 breads
                                             24 food /day
                                             food = FISH, BREAD CHICKEN                                   
gathering                                    LV_1_production                            LV_1_unkeep        
LUMBERJACK      LOGS from FORESTS            2 LOGS 0.25 day                            7 foods            
STONECUTTER     STONE from QUARRY            2 STONES 0.5 day                           7 foods             
FISHERMAN       FISH from PONDS              2 FISH 0.25 day                            0 food
FARM            WHEAT from Field             19 WHEATs 0.66 day                         0 food
ORE_MINER       ORE from ORE_MOUNT           2 ORE 0.75 day                             7 foods            

factory
SAWMILL         PLANKs from LOGs             2 planks from 1 LOG 0.5 day                7 foods             
FOUNDRY         IRON from ORE and LOGs       1 IRON from 2 ORE and 3 LOGS 0.75 day      7 foods             
MILL            FLOUR from WHEAT             1 FLUOR FROM 2 WHEAT 0.5 DAY               0 food 1 STONE     
PIG_FARM        PIG from WHEAT               2 PIGs from 4 WHEAT 1 day                0 food
BUTCHER         PORK from PIGS               8 PORKs from 1 PIG 0.5 day                0 food
TOOLMAKER       TOOLS from PLANKs and IRON   2 TOOLs from 1 IRON and 1 PLANK 1 day      7 foods             
BAKER           BREAD from FLOUR             2 BREADS from 1 FLOUR 0.5 day              0 food 1 LOG      



EARLY BUILD       FOOD_PRODUCTION_WEEK       FOOD_CONSUMTION_WEEK
LUMBERJACK        0                          4
FISHERMAN         8                          0
STONECUTTER       0                          3
SAWMILL           0                          3
MARKET            0                          0
Total                                       10


castle is special building that cannot be builded, can be upgraded
 but even as a building_lot can obtain and give resources


for saving and loading maps
http://www.tutorialspoint.com/java/java_serialization.htm


        try {
            FileOutputStream fileOut =
                    new FileOutputStream("map.sr");
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(map);
            out.close();
            fileOut.close();
            System.out.println("Serialized data is saved in map.sr");
        } catch (Exception ex) {
            ex.printStackTrace();
        }

RAW       1.CLASS       2.CLASS
------------------------------
LOGS     - PLANKS      \
         \              TOOLS
ORE      - IRON        /
FISH
STONES    

WHEATS   - FLOUR      - BREAD
         - PIG        - PORK

4 wheats => 2 PIG
1 PIG  => 8 PORKS


2 WHEATS =>
        

